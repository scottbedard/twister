var Twister=function(t){"use strict";function r(t,r){return s(t,r).shift()}function e(t,r){return new Array(t).fill(r)}function n(t){return s(t).reverse()}function o(t,r){const e=(r%t.length+t.length)%t.length;return t.slice(e).concat(t.slice(0,e))}function s(t,r,e){return t.slice(r,e)}function c(t,r,e,...n){return t.splice(r,e,...n)}function i(t){return h(a(t))}function a(t){const r=Math.sqrt(t.length);return e(r).map((e,n)=>{const o=n*r;return s(t,o,o+r)})}function u(t,r){return e(r).map((r,e)=>({data:null,originalIndex:e,value:t}))}function f(t){return l(h(t))}function l(t){return t.reduce((t,r)=>t.concat(r),[])}function h(t){return t[0].map((r,e)=>t.map(t=>t[e]))}function F(t,r){const{depth:e,wide:n}=t;for(let t=e,o=n?0:e-1;t>o;t--)r(t,-t,t-1)}function B(t,r){return-1===r?l(n(i(t))):2===r?n(t):f(n(a(t)))}function D(t){return{U:{r:a(t.U),c:i(t.U)},L:{r:a(t.L),c:i(t.L)},F:{r:a(t.F),c:i(t.F)},R:{r:a(t.R),c:i(t.R)},B:{r:a(t.B),c:i(t.B)},D:{r:a(t.D),c:i(t.D)}}}function L(t){return t}function R(t){return t.trim()}return t.Cube=class extends class{constructor(t){this.options=t,this.reset()}turn(t){t.split(" ").map(R).filter(L).map(t=>this.parseTurn(t)).forEach(t=>this.applyTurn(t))}}{constructor(t){if(!Number.isInteger(t.size))throw new Error("Cube size must be an integer");if(t.size<2)throw new Error("Cube size must be two or greater");super(t)}applyTurn(t){const{target:e}=t;if("X"===e)this.state=function({U:t,L:r,F:e,R:o,B:c,D:i},{rotation:a}){return-1===a?{U:n(c),L:B(r,1),F:s(t),R:B(o,-1),B:n(i),D:s(e)}:2===a?{U:s(i),L:B(r,2),F:n(c),R:B(o,2),B:n(e),D:s(t)}:{U:s(e),L:B(r,-1),F:s(i),R:B(o,1),B:n(t),D:n(c)}}(this.state,t);else if("Y"===e)this.state=function({U:t,L:r,F:e,R:n,B:o,D:c},{rotation:i}){return-1===i?{U:B(t,-1),L:s(o),F:s(r),R:s(e),B:s(n),D:B(c,1)}:2===i?{U:B(t,2),L:s(n),F:s(o),R:s(r),B:s(e),D:B(c,2)}:{U:B(t,1),L:s(e),F:s(n),R:s(o),B:s(r),D:B(c,-1)}}(this.state,t);else if("Z"===e)this.state=function({U:t,L:r,F:e,R:o,B:s,D:c},{rotation:i}){return-1===i?{U:B(o,-1),L:B(t,-1),F:B(e,-1),R:B(c,-1),B:B(s,1),D:B(r,-1)}:2===i?{U:n(c),L:n(o),F:B(e,2),R:n(r),B:B(s,2),D:n(t)}:{U:B(r,1),L:B(c,1),F:B(e,1),R:B(t,1),B:B(s,-1),D:B(o,1)}}(this.state,t);else{const e=function(t){const{target:r}=t;switch(r){case"U":return"U";case"L":return"L";case"F":return"F";case"R":return"R";case"B":return"B";case"D":return"D"}}(t);switch((1===t.depth||t.wide)&&(this.state[e]=B(this.state[e],t.rotation)),e){case"U":!function(t,e){const n=D(t);F(e,(o,s,i)=>{const a=r(n.B.r,i),u=r(n.R.r,i),f=r(n.F.r,i),h=r(n.L.r,i);let F,B,D,L;2===e.rotation?(F=f,B=h,D=a,L=u):-1===e.rotation?(F=u,B=f,D=h,L=a):(F=h,B=a,D=u,L=f),c(n.B.r,i,1,F),c(n.R.r,i,1,B),c(n.F.r,i,1,D),c(n.L.r,i,1,L),t.B=l(n.B.r),t.R=l(n.R.r),t.F=l(n.F.r),t.L=l(n.L.r)})}(this.state,t);break;case"L":!function(t,e){const o=D(t);F(e,(s,i,a)=>{const u=r(o.U.c,a),l=r(o.F.c,a),h=r(o.D.c,a),F=r(o.B.c,i);let B,D,L,R;2===e.rotation?(B=h,D=n(F),L=u,R=n(l)):-1===e.rotation?(B=l,D=h,L=n(F),R=n(u)):(B=n(F),D=u,L=l,R=n(h)),c(o.U.c,a,1,B),c(o.F.c,a,1,D),c(o.D.c,a,1,L),c(o.B.c,i,1,R),t.U=f(o.U.c),t.F=f(o.F.c),t.D=f(o.D.c),t.B=f(o.B.c)})}(this.state,t);break;case"F":!function(t,e){const o=D(t);F(e,(s,i,a)=>{const u=r(o.U.r,i),h=r(o.R.c,a),F=r(o.D.r,a),B=r(o.L.c,i);let D,L,R,U;2===e.rotation?(D=n(F),L=n(B),R=n(u),U=n(h)):-1===e.rotation?(D=h,L=n(F),R=B,U=n(u)):(D=n(B),L=u,R=n(h),U=F),c(o.U.r,i,1,D),c(o.R.c,a,1,L),c(o.D.r,a,1,R),c(o.L.c,i,1,U),t.U=l(o.U.r),t.R=f(o.R.c),t.D=l(o.D.r),t.L=f(o.L.c)})}(this.state,t);break;case"R":!function(t,e){const o=D(t);F(e,(s,i,a)=>{const u=r(o.U.c,i),l=r(o.B.c,a),h=r(o.D.c,i),F=r(o.F.c,i);let B,D,L,R;2===e.rotation?(B=h,D=n(F),L=u,R=n(l)):-1===e.rotation?(B=n(l),D=n(h),L=F,R=u):(B=F,D=n(u),L=n(l),R=h),c(o.U.c,i,1,B),c(o.B.c,a,1,D),c(o.D.c,i,1,L),c(o.F.c,i,1,R),t.U=f(o.U.c),t.B=f(o.B.c),t.D=f(o.D.c),t.F=f(o.F.c)})}(this.state,t);break;case"B":!function(t,e){const o=D(t);F(e,(s,i,a)=>{const u=r(o.U.r,a),h=r(o.L.c,a),F=r(o.D.r,i),B=r(o.R.c,i);let D,L,R,U;2===e.rotation?(D=n(F),L=n(B),R=n(u),U=n(h)):-1===e.rotation?(D=n(h),L=F,R=n(B),U=u):(D=B,L=n(u),R=h,U=n(F)),c(o.U.r,s-1,1,D),c(o.L.c,s-1,1,L),c(o.D.r,i,1,R),c(o.R.c,i,1,U),t.U=l(o.U.r),t.L=f(o.L.c),t.D=l(o.D.r),t.R=f(o.R.c)})}(this.state,t);break;case"D":!function(t,e){const n=D(t);F(e,(o,s)=>{const i=r(n.F.r,s),a=r(n.R.r,s),u=r(n.B.r,s),f=r(n.L.r,s);let h,F,B,D;2===e.rotation?(h=u,F=f,B=i,D=a):-1===e.rotation?(h=a,F=u,B=f,D=i):(h=f,F=i,B=a,D=u),c(n.F.r,s,1,h),c(n.R.r,s,1,F),c(n.B.r,s,1,B),c(n.L.r,s,1,D),t.F=l(n.F.r),t.R=l(n.R.r),t.B=l(n.B.r),t.L=l(n.L.r)})}(this.state,t)}}}isSolved(){return!1}parseTurn(t){return function(t){const r=t.match(/^(\d)*([ulfrbdxyzULFRBDXYZ]){1}(w)*(['-2])*$/);if(null===r)throw new Error(`Invalid turn: ${t}`);const e=r[4],n=r[2],o=Boolean(r[3]);let s=r[1]?parseInt(r[1],10):1;o&&(s=Math.max(2,s));let c=1;return"-"===e||"'"===e?c=-1:"2"===e&&(c=2),{depth:s,rotation:c,target:n,wide:o}}(t)}reset(){const t=Math.pow(this.options.size,2);this.state={U:u(0,t),L:u(1,t),F:u(2,t),R:u(3,t),B:u(4,t),D:u(5,t)}}},t.createFace=function(t,r){if(!Number.isInteger(t)||t<3)throw new Error("Polygon sides must be an integer of 3 or greater");if(!Number.isInteger(r)||r<2)throw new Error("Polygon layers must be an integer of 2 or greater");if(3===t)throw new Error("Pyramids are not implemented yet");const e=[];for(let n=0,o=Math.floor(r/2);n<o;n++){const o=(r-2*n-1)*t;for(let t=0;t<o;t++)e.push({center:!1,currentIndex:t,depth:n,meta:{},originalIndex:t})}return r%2&&e.push({center:!0,currentIndex:0,depth:Math.floor(r/2),meta:{},originalIndex:0}),{layers:r,sides:t,stickers:e}},t.extractSlice=function(t,r,e){if(!Number.isInteger(r)||r<0)throw new Error("Slice depth must be a positive integer");if(!Number.isInteger(e)||e<0)throw new Error("Slice angle must be a positive integer");return[]},t.rotateFace=function(t,r){if(!Number.isInteger(r))throw new Error("Face rotations must be an integer");const e=[];r%=t.sides;for(let n=0,s=Math.floor(t.layers/2);n<=s;n++){const s=t.stickers.filter(t=>t.depth===n);if(r&&s.length>1){const n=s.length/t.sides*-r;n&&e.push(...o(s,n))}else e.push(...s)}return Object.assign(Object.assign({},t),{stickers:e})},t}({});
